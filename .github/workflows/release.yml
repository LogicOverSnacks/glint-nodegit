name: Release

on:
  push:
    tags:
      - v*.*.*

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, windows-latest]
        version: [
          { node: 18.15.0, electron: 25.0.1 }
        ]

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Install node
        uses: actions/setup-node@v3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          node-version: ${{ matrix.version.node }}
          cache: 'npm'

      - name: Setup (linux)
        if: matrix.os == 'ubuntu-latest'
        # git >= 2.18 required for actions/checkout git support
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:git-core/ppa
          sudo apt-get update
          sudo apt-get install -y git build-essential clang python3 libssl-dev libkrb5-dev libc++-dev
          npm config set openssl_dir ${{ github.workspace }}/openssl-1.1.1q/build
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      - name: Cache Openssl (linux)
        if: matrix.os == 'ubuntu-latest'
        id: cache-openssl
        uses: actions/cache@v3
        with:
          path: openssl-1.1.1q
          key: ${{ runner.os }}-openssl

      - name: Build Openssl (linux)
        if: matrix.os == 'ubuntu-latest' && steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          wget -qO- https://www.openssl.org/source/openssl-1.1.1q.tar.gz | tar -xz
          cd openssl-1.1.1q
          ./config --prefix=${{ github.workspace }}/openssl-1.1.1q/build --openssldir=${{ github.workspace }}/openssl-1.1.1q/build
          make
          make install

      - name: Setup (macos)
        if: matrix.os == 'macos-12'
        run: |
          npm config set openssl_dir /usr/local/opt/openssl@1.1

      - name: Setup (windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install visualstudio2022buildtools visualstudio2022-workload-vctools openssl -y --no-progress
          npm config set msvs_version 2022
          npm config set openssl_dir "C:\Program Files\OpenSSL-Win64"

      - name: Install
        env:
          CC: clang
          CXX: clang++
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          NODEGIT_OPENSSL_STATIC_LINK: 1
        run: npm ci --arch=x64 --runtime=electron --target=${{ matrix.version.electron }} --target_arch=x64 --disturl=https://electronjs.org/headers --build_from_source=true

      - name: Deploy
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install -g @mapbox/node-pre-gyp
          node lifecycleScripts/clean
          npx node-pre-gyp package --runtime=electron --target=${{ matrix.version.electron }}
          npx node-pre-gyp-github publish

      - name: Setup (macos M1)
        if: matrix.os == 'macos-12'
        run: |
          brew install grep
          brew uninstall --ignore-dependencies openssl@1.1
          FILE=$(brew fetch --force --bottle-tag=arm64_big_sur openssl@1.1 | ggrep -oP '(?<=Downloaded to\: ).*')
          echo "$FILE"
          brew install "$FILE"

      - name: Install (macos M1)
        if: matrix.os == 'macos-12'
        env:
          CC: clang
          CXX: clang++
          CFLAGS: -target arm64-apple-macos11
          npm_config_clang: 1
          GYP_DEFINES: use_obsolete_asm=true
          NODEGIT_OPENSSL_STATIC_LINK: 1
        run: npm ci --arch=arm64 --runtime=electron --target=${{ matrix.version.electron }} --target_arch=arm64 --disturl=https://electronjs.org/headers --build_from_source=true

      - name: Deploy (macos M1)
        if: matrix.os == 'macos-12'
        env:
          NODE_PRE_GYP_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install -g @mapbox/node-pre-gyp
          node lifecycleScripts/clean
          npx node-pre-gyp package --runtime=electron --target=${{ matrix.version.electron }} --arch=arm64 --target_arch=arm64
          npx node-pre-gyp-github publish

      - name: Prepare artifact for upload
        if: matrix.os == 'ubuntu-latest'
        run: |
          touch artifact.tar.gz
          tar -zcf artifact.tar.gz --exclude=artifact.tar.gz .

      - name: Upload artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: build-ubuntu
          path: artifact.tar.gz
          if-no-files-found: error
          retention-days: 5

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-ubuntu

      - name: Extract artifact
        run: tar -xzf artifact.tar.gz

      - name: Publish
        env:
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          npm config set _authToken ${NPM_PUBLISH_TOKEN}
          npm publish --access public
